---
import { Icon } from "astro-icon/components";
import Button from '../../ui/Button.astro';
import SectionLayout from '../../ui/SectionLayout.astro';

export interface Props {
  title: string;
  content: string;
  images: (string | ImageMetadata)[];
  imageCategories?: {
    name: string;
    label: string;
    images: (string | ImageMetadata)[];
  }[];
}

const { title, content, images, imageCategories } = Astro.props;

// Helper function to get image src
function getImageSrc(image: string | ImageMetadata): string {
  return typeof image === 'string' ? image : image.src;
}

// Default categories if none provided
const defaultCategories = [
  {
    name: 'general',
    label: 'General',
    images: images.length > 0 ? images : [
      '/images/placeholder-image.png',
      '/images/placeholder-image-1.png',
      '/images/placeholder-image-2.png',
      '/images/header-30.png',
      '/images/header-50.png',
      '/images/layout-355.png',
      '/images/layout-85.png',
      '/images/tab-pane-1.png'
    ]
  },
  {
    name: 'exterior',
    label: 'Vista Exterior',
    images: images.length > 0 ? images : [
      '/images/placeholder-image.png',
      '/images/placeholder-image-1.png',
      '/images/placeholder-image-2.png',
      '/images/header-30.png',
      '/images/header-50.png',
      '/images/layout-355.png'
    ]
  },
  {
    name: 'interior',
    label: 'Vista Interior',
    images: images.length > 0 ? images : [
      '/images/layout-355.png',
      '/images/layout-85.png',
      '/images/tab-pane-1.png',
      '/images/header-50.png',
      '/images/placeholder-image.png',
      '/images/placeholder-image-1.png',
      '/images/placeholder-image-2.png'
    ]
  },
  {
    name: 'planos',
    label: 'Planos',
    images: images.length > 0 ? images : [
      '/images/tab-pane-1.png',
      '/images/layout-355.png',
      '/images/placeholder-image.png',
      '/images/layout-85.png',
      '/images/header-30.png'
    ]
  }
];

const categories = imageCategories || defaultCategories;

// Split content into paragraphs
const paragraphs = content.split('\n\n').filter(p => p.trim());
---

<section class="py-20 bg-gradient-to-br from-gray-50 via-white to-gray-50 relative overflow-hidden" id="project-details">
  <!-- Decorative background elements -->
  <div class="absolute top-0 left-0 w-72 h-72 bg-brand-primary/5 rounded-full blur-3xl"></div>
  <div class="absolute bottom-0 right-0 w-96 h-96 bg-brand-secondary/5 rounded-full blur-3xl"></div>

  <div class="max-w-7xl mx-auto px-6">
    <!-- Section Header -->
    <div class="text-center max-w-4xl mx-auto mb-16" data-aos="fade-up">
      <div class="inline-flex items-center gap-2 bg-brand-primary/10 backdrop-blur-sm border border-brand-primary/20 rounded-full px-4 py-2 mb-6">
        <Icon name="ph:image-square" class="w-5 h-5 text-brand-primary" />
        <span class="text-brand-primary font-semibold text-sm">Detalles del Proyecto</span>
      </div>
      
      <h2 class="text-4xl lg:text-6xl font-bold text-gray-900 leading-tight mb-6">
        {title}
      </h2>
      
      <p class="text-xl text-gray-600 leading-relaxed">
        Explora cada detalle de este proyecto y descubre la calidad en cada acabado.
      </p>
    </div>

    <!-- Main Layout Grid -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-12 w-full">
      
      <!-- Gallery Section -->
      <div class="lg:col-span-2 bg-white rounded-3xl shadow-2xl border border-gray-100 overflow-hidden" data-aos="fade-right" data-aos-duration="800">
        
        <!-- Gallery Header with Category Selector -->
        <div class="bg-gradient-to-r from-gray-50 to-white p-6 border-b border-gray-100">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-bold text-gray-900 flex items-center gap-2">
              <Icon name="ph:images-fill" class="w-5 h-5 text-brand-primary" />
              Galería de Imágenes
            </h3>
            
            <!-- Category Selector -->
            <div class="flex items-center gap-3">
              <!-- Category Icon - Changes based on selection -->
              <div class="w-10 h-10 bg-gradient-to-br from-brand-primary/10 to-brand-primary/20 rounded-xl flex items-center justify-center border border-brand-primary/20">
                <Icon name="ph:images-square" id="categoryIcon" class="w-5 h-5 text-brand-primary" />
              </div>
              
              <div class="relative">
                <select 
                  id="categorySelector" 
                  class="appearance-none bg-white border border-gray-200 rounded-2xl px-4 py-2 pr-10 text-sm font-medium text-gray-700 hover:border-brand-primary focus:outline-none focus:ring-2 focus:ring-brand-primary focus:border-transparent transition-all duration-200 cursor-pointer shadow-sm hover:shadow-md"
                >
                  {categories.map((category, index) => (
                    <option value={category.name} selected={index === 0}>
                      {category.label}
                    </option>
                  ))}
                </select>
                
                <!-- Custom dropdown arrow -->
                <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                  <Icon name="ph:caret-down" class="w-4 h-4 text-gray-400" />
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="gallery-container relative h-[400px] lg:h-[500px] group bg-gray-50">
          {categories[0].images.map((image, index) => (
            <div 
              class={`gallery-slide absolute inset-0 transition-all duration-300 ease-in-out ${index === 0 ? 'opacity-100' : 'opacity-0'}`}
              data-slide={index}
            >
              <img
                src={getImageSrc(image)}
                alt={`${title} - Imagen ${index + 1}`}
                class="w-full h-full object-cover"
              />
            </div>
          ))}
          
          <!-- Navigation Controls -->
          <div class="absolute inset-0 flex items-center justify-between p-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
            <button class="gallery-prev w-12 h-12 bg-white/90 backdrop-blur-sm hover:bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center">
              <Icon name="ph:caret-left" class="w-5 h-5 text-gray-900" />
            </button>
            <button class="gallery-next w-12 h-12 bg-white/90 backdrop-blur-sm hover:bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center">
              <Icon name="ph:caret-right" class="w-5 h-5 text-gray-900" />
            </button>
          </div>

          <!-- Image Counter -->
          <div class="absolute top-4 right-4 bg-gray-900/80 backdrop-blur-sm text-white px-3 py-1 rounded-2xl text-sm font-semibold shadow-lg">
            <span class="gallery-counter">1</span> / <span class="gallery-total">{categories[0].images.length}</span>
          </div>

          <!-- Category Badge -->
          <div class="absolute top-4 left-4 bg-brand-primary/90 backdrop-blur-sm text-white px-3 py-1 rounded-2xl text-sm font-semibold shadow-lg">
            <span class="category-badge">{categories[0].label}</span>
          </div>
        </div>

        <!-- Thumbnail Strip -->
        <div class="thumbnail-container p-6 border-t border-gray-100 overflow-hidden">
          <div class="relative w-full">
            <!-- Scroll Navigation Buttons -->
            <button 
              id="scrollLeft" 
              class="absolute left-0 top-1/2 transform -translate-y-1/2 -translate-x-2 z-20 w-8 h-8 bg-white/90 backdrop-blur-sm hover:bg-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center opacity-1 pointer-events-auto"
            >
              <Icon name="ph:caret-left" class="w-4 h-4 text-gray-900" />
            </button>
            
            <button 
              id="scrollRight" 
              class="absolute right-0 top-1/2 transform -translate-y-1/2 translate-x-2 z-20 w-8 h-8 bg-white/90 backdrop-blur-sm hover:bg-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center opacity-1 pointer-events-auto"
            >
              <Icon name="ph:caret-right" class="w-4 h-4 text-gray-900" />
            </button>

            <!-- Scrollable Container -->
            <div 
              id="thumbnailScrollContainer" 
              class="overflow-x-auto scrollbar-hide scroll-smooth"
              style="scrollbar-width: none; -ms-overflow-style: none; width: 100%;"
            >
              <div class="flex gap-4 pb-2" id="thumbnailGrid" style="width: fit-content; min-width: 100%;">
                {categories[0].images.map((image, index) => (
                  <button 
                    class={`gallery-thumb flex-shrink-0 w-32 h-20 rounded-2xl overflow-hidden transition-all duration-300 shadow-md hover:shadow-lg ${index === 0 ? 'ring-2 ring-brand-primary' : 'ring-1 ring-gray-200 hover:ring-brand-primary/50'}`}
                    data-slide={index}
                  >
                    <img
                      src={getImageSrc(image)}
                      alt={`Thumbnail ${index + 1}`}
                      class="w-full h-full object-cover"
                    />
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Project Info Column -->
      <div class="h-full space-y-8" data-aos="fade-left" data-aos-duration="800" data-aos-delay="200">
        <!-- Project Stats Card -->
        <div class="bg-white rounded-3xl shadow-2xl border border-gray-100 p-8">
          <div class="flex items-center gap-3 mb-6">
            <div class="w-12 h-12 bg-gradient-to-br from-brand-primary to-brand-primary/80 rounded-2xl flex items-center justify-center">
              <Icon name="ph:chart-bar-fill" class="w-6 h-6 text-white" />
            </div>
            <h3 class="text-2xl font-bold text-gray-900">Especificaciones</h3>
          </div>
          
          <div class="space-y-4">
            <!-- Size -->
            <div class="bg-gradient-to-br from-brand-secondary/10 to-brand-secondary/20 rounded-2xl p-4 border border-brand-secondary/30">
              <div class="flex items-center gap-3">
                <div class="w-12 h-12 bg-brand-secondary rounded-xl flex items-center justify-center">
                  <Icon name="ph:ruler" class="w-6 h-6 text-white" />
                </div>
                <div>
                  <div class="text-xl font-bold text-gray-900">13,500 m²</div>
                  <div class="text-sm text-gray-600">Área construida</div>
                </div>
              </div>
            </div>

            <!-- Floors -->
            <div class="bg-gradient-to-br from-brand-primary/10 to-brand-primary/20 rounded-2xl p-4 border border-brand-primary/30">
              <div class="flex items-center gap-3">
                <div class="w-12 h-12 bg-gradient-to-br from-brand-primary to-brand-primary/80 rounded-xl flex items-center justify-center">
                  <Icon name="ph:buildings" class="w-6 h-6 text-white" />
                </div>
                <div>
                  <div class="text-xl font-bold text-gray-900">5 Pisos</div>
                  <div class="text-sm text-gray-600">Niveles</div>
                </div>
              </div>
            </div>

            <!-- Units -->
            <div class="bg-gradient-to-br from-brand-secondary/15 to-brand-secondary/25 rounded-2xl p-4 border border-brand-secondary/40">
              <div class="flex items-center gap-3">
                <div class="w-12 h-12 bg-gradient-to-br from-brand-secondary/90 to-brand-secondary rounded-xl flex items-center justify-center">
                  <Icon name="ph:house" class="w-6 h-6 text-white" />
                </div>
                <div>
                  <div class="text-xl font-bold text-gray-900">20 Departamentos</div>
                  <div class="text-sm text-gray-600">Unidades</div>
                </div>
              </div>
            </div>

            <!-- Parking -->
            <div class="bg-gradient-to-br from-brand-primary/15 to-brand-primary/25 rounded-2xl p-4 border border-brand-primary/40">
              <div class="flex items-center gap-3">
                <div class="w-12 h-12 bg-gradient-to-br from-brand-primary/90 to-brand-primary rounded-xl flex items-center justify-center">
                  <Icon name="ph:car" class="w-6 h-6 text-white" />
                </div>
                <div>
                  <div class="text-xl font-bold text-gray-900">30 Espacios</div>
                  <div class="text-sm text-gray-600">Estacionamiento</div>
                </div>
              </div>
            </div>

            <!-- Pet Friendly -->
            <div class="bg-gradient-to-br from-brand-secondary/10 to-brand-secondary/20 rounded-2xl p-4 border border-brand-secondary/30">
              <div class="flex items-center gap-3">
                <div class="w-12 h-12 bg-brand-secondary rounded-xl flex items-center justify-center">
                  <img src="/src/assets/icons/IconoPetFriendly.svg" alt="Pet Friendly" class="w-6 h-6" />
                </div>
                <div>
                  <div class="text-xl font-bold text-gray-900">Pet Friendly</div>
                  <div class="text-sm text-gray-600">Mascotas bienvenidas</div>
                </div>
              </div>
            </div>
          </div>

          <!-- Completion Date -->
          <div class="mt-6 bg-gradient-to-r from-gray-50 to-gray-100 rounded-2xl p-4 border border-gray-200">
            <div class="flex items-center gap-3">
              <div class="w-12 h-12 bg-gradient-to-br from-gray-700 to-gray-800 rounded-xl flex items-center justify-center">
                <Icon name="ph:calendar-check" class="w-6 h-6 text-white" />
              </div>
              <div>
                <div class="text-xl font-bold text-gray-900">28/07/2020</div>
                <div class="text-gray-600">Fecha de finalización</div>
              </div>
            </div>
          </div>

          <!-- Action Buttons Footer -->
          <div class="mt-8 pt-6 border-t border-gray-200">
            <div class="grid grid-cols-3 gap-2">
              <div class="text-center">
                <button class="w-full flex flex-col items-center gap-2 p-4 rounded-2xl bg-white hover:bg-gray-50 border border-gray-200 hover:border-brand-primary/30 transition-all duration-300 group">
                  <div class="w-12 h-12 bg-gray-100 group-hover:bg-brand-primary/10 rounded-xl flex items-center justify-center transition-colors duration-300">
                    <Icon name="ph:download" class="w-6 h-6 text-gray-600 group-hover:text-brand-primary" />
                  </div>
                  <span class="text-sm font-medium text-gray-700 group-hover:text-brand-primary">Descargar Brochure</span>
                </button>
              </div>
              
              <div class="text-center">
                <button class="w-full flex flex-col items-center gap-2 p-4 rounded-2xl bg-white hover:bg-gray-50 border border-gray-200 hover:border-brand-primary/30 transition-all duration-300 group">
                  <div class="w-12 h-12 bg-gray-100 group-hover:bg-brand-primary/10 rounded-xl flex items-center justify-center transition-colors duration-300">
                    <Icon name="ph:video" class="w-6 h-6 text-gray-600 group-hover:text-brand-primary" />
                  </div>
                  <span class="text-sm font-medium text-gray-700 group-hover:text-brand-primary">Tour Virtual</span>
                </button>
              </div>
              
              <div class="text-center">
                <button class="w-full flex flex-col items-center gap-2 p-4 rounded-2xl bg-white hover:bg-gray-50 border border-gray-200 hover:border-brand-primary/30 transition-all duration-300 group">
                  <div class="w-12 h-12 bg-gray-100 group-hover:bg-brand-primary/10 rounded-xl flex items-center justify-center transition-colors duration-300">
                    <Icon name="ph:info" class="w-6 h-6 text-gray-600 group-hover:text-brand-primary" />
                  </div>
                  <span class="text-sm font-medium text-gray-700 group-hover:text-brand-primary">Más información</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Pass categories data to client-side -->
<script define:vars={{ categories }}>
  window.projectCategories = categories;
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Get categories from the global variable set by define:vars
    const serverCategories = (window as any).projectCategories || null;
    
    const categories = serverCategories || [
      {
        name: 'general',
        label: 'General',
        images: [
          '/images/placeholder-image.png',
          '/images/placeholder-image-1.png',
          '/images/placeholder-image-2.png',
          '/images/header-30.png',
          '/images/header-50.png',
          '/images/layout-355.png',
          '/images/layout-85.png',
          '/images/tab-pane-1.png'
        ]
      },
      {
        name: 'exterior',
        label: 'Vista Exterior',
        images: [
          '/images/placeholder-image.png',
          '/images/placeholder-image-1.png',
          '/images/placeholder-image-2.png',
          '/images/header-30.png',
          '/images/header-50.png',
          '/images/layout-355.png'
        ]
      },
      {
        name: 'interior',
        label: 'Vista Interior',
        images: [
          '/images/layout-355.png',
          '/images/layout-85.png',
          '/images/tab-pane-1.png',
          '/images/header-50.png',
          '/images/placeholder-image.png',
          '/images/placeholder-image-1.png',
          '/images/placeholder-image-2.png'
        ]
      },
      {
        name: 'planos',
        label: 'Planos',
        images: [
          '/images/tab-pane-1.png',
          '/images/layout-355.png',
          '/images/placeholder-image.png',
          '/images/layout-85.png',
          '/images/header-30.png'
        ]
      }
    ];

    // DOM elements
    const categorySelector = document.getElementById('categorySelector') as HTMLSelectElement;
    const categoryIcon = document.getElementById('categoryIcon') as HTMLElement;
    const gallerySlides = document.querySelectorAll('.gallery-slide') as NodeListOf<HTMLElement>;
    const galleryThumbs = document.querySelectorAll('.gallery-thumb') as NodeListOf<HTMLButtonElement>;
    const prevButton = document.querySelector('.gallery-prev') as HTMLButtonElement | null;
    const nextButton = document.querySelector('.gallery-next') as HTMLButtonElement | null;
    const galleryCounter = document.querySelector('.gallery-counter') as HTMLElement | null;
    const galleryTotal = document.querySelector('.gallery-total') as HTMLElement | null;
    const categoryBadge = document.querySelector('.category-badge') as HTMLElement | null;
    const thumbnailGrid = document.getElementById('thumbnailGrid') as HTMLElement | null;
    const thumbnailScrollContainer = document.getElementById('thumbnailScrollContainer') as HTMLElement | null;
    const scrollLeftBtn = document.getElementById('scrollLeft') as HTMLButtonElement | null;
    const scrollRightBtn = document.getElementById('scrollRight') as HTMLButtonElement | null;
    const galleryContainer = document.querySelector('.gallery-container') as HTMLElement | null;
    
    let currentSlide = 0;
    let currentCategory = categories[0];
    
    // Initialize category icon
    updateCategoryIcon(currentCategory.name);

    // Function to update category icon
    function updateCategoryIcon(categoryName: string): void {
      if (categoryIcon) {
        const iconMap: { [key: string]: string } = {
                    'general': `<svg class="w-5 h-5 text-brand-primary" fill="currentColor" viewBox="0 0 256 256"><path d="M216,40H40A16,16,0,0,0,24,56V200a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A16,16,0,0,0,216,40ZM40,56H216V200H40ZM144,88a8,8,0,0,1,8-8h64a8,8,0,0,1,0,16H152A8,8,0,0,1,144,88Zm0,32a8,8,0,0,1,8-8h64a8,8,0,0,1,0,16H152A8,8,0,0,1,144,120Zm0,32a8,8,0,0,1,8-8h64a8,8,0,0,1,0,16H152A8,8,0,0,1,144,152ZM112,88v80a8,8,0,0,1-16,0V96L89.66,102.34a8,8,0,0,1-11.32-11.32l16-16A8,8,0,0,1,112,88Z"></path></svg>`,
          'exterior': `<svg class="w-5 h-5 text-brand-primary" fill="currentColor" viewBox="0 0 256 256"><path d="M240,208H224V96a16,16,0,0,0-16-16H164.94L139.58,51.58A16,16,0,0,0,128,48H48A16,16,0,0,0,32,64V208H16a8,8,0,0,0,0,16H240a8,8,0,0,0,0-16ZM208,80V208H48V64H128l26.42,32Z"></path></svg>`,
          'interior': `<svg class="w-5 h-5 text-brand-primary" fill="currentColor" viewBox="0 0 256 256"><path d="M219.31,108.68l-80-80a16,16,0,0,0-22.62,0l-80,80A15.87,15.87,0,0,0,32,120v96a8,8,0,0,0,8,8H216a8,8,0,0,0,8-8V120A15.87,15.87,0,0,0,219.31,108.68ZM208,208H48V120l80-80,80,80Z"></path></svg>`,
          'planos': `<svg class="w-5 h-5 text-brand-primary" fill="currentColor" viewBox="0 0 256 256"><path d="M232,48V208a8,8,0,0,1-8,8H32a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H224A8,8,0,0,1,232,48ZM216,56H40V200H216ZM88,88V176a8,8,0,0,1-16,0V107.31L60.69,118.63a8,8,0,0,1-11.32-11.32l24-24A8,8,0,0,1,88,88Zm136,0a8,8,0,0,1-8,8H160a8,8,0,0,1,0-16h56A8,8,0,0,1,224,88Zm0,32a8,8,0,0,1-8,8H160a8,8,0,0,1,0-16h56A8,8,0,0,1,224,120Zm0,32a8,8,0,0,1-8,8H160a8,8,0,0,1,0-16h56A8,8,0,0,1,224,152Z"></path></svg>`
        };
        
        const iconSvg = iconMap[categoryName] || iconMap['general'];
        categoryIcon.innerHTML = iconSvg;
      }
    }
    
    function updateSlide(index: number): void {
      if (index < 0 || index >= currentCategory.images.length) return;
      
      // Update slides
      const slides = galleryContainer?.querySelectorAll('.gallery-slide') as NodeListOf<HTMLElement>;
      slides.forEach((slide, i) => {
        slide.classList.toggle('opacity-100', i === index);
        slide.classList.toggle('opacity-0', i !== index);
      });
      
      // Update thumbnails
      const thumbs = thumbnailGrid?.querySelectorAll('.gallery-thumb') as NodeListOf<HTMLButtonElement>;
      thumbs.forEach((thumb, i) => {
        if (i === index) {
          thumb.classList.remove('ring-1', 'ring-gray-200', 'hover:ring-brand-primary/50');
          thumb.classList.add('ring-2', 'ring-brand-primary');
        } else {
          thumb.classList.remove('ring-2', 'ring-brand-primary');
          thumb.classList.add('ring-1', 'ring-gray-200', 'hover:ring-brand-primary/50');
        }
      });
      
      // Update counter
      if (galleryCounter) {
        galleryCounter.textContent = (index + 1).toString();
      }
      
      currentSlide = index;
    }
    
    function nextSlide(): void {
      updateSlide((currentSlide + 1) % currentCategory.images.length);
    }
    
    function prevSlide(): void {
      updateSlide((currentSlide - 1 + currentCategory.images.length) % currentCategory.images.length);
    }

    function getImageSrc(image: any): string {
      if (typeof image === 'string') {
        return image;
      }
      return image.src || image;
    }

    function updateGalleryContent(categoryName: string): void {
      const category = categories.find((cat: any) => cat.name === categoryName);
      if (!category) return;

      currentCategory = category;
      currentSlide = 0;

      // Update gallery slides
      if (galleryContainer) {
        // Remove existing slides
        const existingSlides = galleryContainer.querySelectorAll('.gallery-slide');
        existingSlides.forEach(slide => slide.remove());
        
        // Add new slides
        category.images.forEach((image: any, index: number) => {
          const slideDiv = document.createElement('div');
          slideDiv.className = `gallery-slide absolute inset-0 transition-all duration-300 ease-in-out ${index === 0 ? 'opacity-100' : 'opacity-0'}`;
          slideDiv.setAttribute('data-slide', index.toString());
          
          const img = document.createElement('img');
          img.src = getImageSrc(image);
          img.alt = `Imagen ${index + 1}`;
          img.className = 'w-full h-full object-cover';
          
          slideDiv.appendChild(img);
          galleryContainer.insertBefore(slideDiv, galleryContainer.firstChild);
        });
      }

      // Update thumbnails
      if (thumbnailGrid) {
        // Clear existing thumbnails
        thumbnailGrid.innerHTML = '';
        
        // Add new thumbnails
        category.images.forEach((image: any, index: number) => {
          const thumbButton = document.createElement('button');
          thumbButton.className = `gallery-thumb flex-shrink-0 w-32 h-20 rounded-2xl overflow-hidden transition-all duration-300 shadow-md hover:shadow-lg ${index === 0 ? 'ring-2 ring-brand-primary' : 'ring-1 ring-gray-200 hover:ring-brand-primary/50'}`;
          thumbButton.setAttribute('data-slide', index.toString());
          
          const img = document.createElement('img');
          img.src = getImageSrc(image);
          img.alt = `Thumbnail ${index + 1}`;
          img.className = 'w-full h-full object-cover';
          
          thumbButton.appendChild(img);
          thumbButton.addEventListener('click', () => updateSlide(index));
          
          thumbnailGrid.appendChild(thumbButton);
        });
        
        // Force the container to expand
        thumbnailGrid.style.width = 'fit-content';
        thumbnailGrid.style.minWidth = '100%';
      }

      // Update total count
      if (galleryTotal) {
        galleryTotal.textContent = category.images.length.toString();
      }

      // Update category badge
      if (categoryBadge) {
        categoryBadge.textContent = category.label;
      }

      // Update category icon
      updateCategoryIcon(categoryName);

      // Reset counter to 1
      if (galleryCounter) {
        galleryCounter.textContent = '1';
      }

      // Reset to first slide
      currentSlide = 0;
      
      // Re-check scroll functionality for new content
      setTimeout(() => {
        setupThumbnailScroll();
      }, 100);
    }
    
    // Thumbnail scroll functionality
    function setupThumbnailScroll() {
      const leftBtn = document.getElementById('scrollLeft') as HTMLButtonElement;
      const rightBtn = document.getElementById('scrollRight') as HTMLButtonElement;
      const container = document.getElementById('thumbnailScrollContainer') as HTMLElement;
      
      if (!container || !leftBtn || !rightBtn) return;

      const scrollAmount = 320;

      // Simple scroll functions
      leftBtn.onclick = () => {
        container.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
      };

      rightBtn.onclick = () => {
        container.scrollBy({ left: scrollAmount, behavior: 'smooth' });
      };

      // Update button visibility
      function updateButtons() {
        const { scrollLeft, scrollWidth, clientWidth } = container;
        const maxScroll = scrollWidth - clientWidth;
        
        leftBtn.style.opacity = scrollLeft <= 0 ? '0.5' : '1';
        rightBtn.style.opacity = scrollLeft >= maxScroll - 1 ? '0.5' : '1';
      }

      container.addEventListener('scroll', updateButtons);
      setTimeout(updateButtons, 200);
    }

    // Event listeners
    if (categorySelector) {
      categorySelector.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        updateGalleryContent(target.value);
      });
    }

    if (prevButton) {
      prevButton.addEventListener('click', prevSlide);
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', nextSlide);
    }
    
    // Initialize thumbnail scroll
    setupThumbnailScroll();
    
    // Thumbnail navigation - initial setup
    const initialThumbs = thumbnailGrid?.querySelectorAll('.gallery-thumb') as NodeListOf<HTMLButtonElement>;
    initialThumbs?.forEach((thumb, index) => {
      thumb.addEventListener('click', () => updateSlide(index));
    });
    
    // Initialize
    updateSlide(0);
  });
</script>

<style>
  #thumbnailScrollContainer {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  
  #thumbnailScrollContainer::-webkit-scrollbar {
    display: none;
  }
  
  #thumbnailGrid {
    width: fit-content !important;
    min-width: 100%;
  }
  
  .gallery-thumb {
    min-width: 128px;
  }
</style>