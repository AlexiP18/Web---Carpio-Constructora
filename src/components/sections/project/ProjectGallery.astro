---
import { Icon } from "astro-icon/components";

export interface Props {
  images: string[];
  title: string;
}

const { images, title } = Astro.props;
---

<section class="py-20 bg-gradient-to-br from-slate-50 via-white to-gray-50 relative overflow-hidden" id="gallery">
  <!-- Background decorations -->
  <div class="absolute inset-0">
    <div class="absolute top-20 right-20 w-40 h-40 bg-brand-primary/5 rounded-full blur-3xl"></div>
    <div class="absolute bottom-20 left-20 w-32 h-32 bg-brand-secondary/5 rounded-full blur-2xl"></div>
  </div>

  <div class="max-w-7xl mx-auto px-6 relative z-10">
    <!-- Section Header -->
    <div class="text-center max-w-4xl mx-auto mb-16" data-aos="fade-up">
      <div class="inline-flex items-center gap-2 bg-brand-primary/10 backdrop-blur-sm border border-brand-primary/20 rounded-full px-4 py-2 mb-6">
        <Icon name="ph:images-fill" class="w-5 h-5 text-brand-primary" />
        <span class="text-brand-primary font-semibold text-sm">Galería del Proyecto</span>
      </div>
      
      <h2 class="text-4xl lg:text-6xl font-bold text-gray-900 leading-tight">
        Galería Visual
      </h2>
      
      <p class="text-xl text-gray-600 leading-relaxed mt-6">
        Explora cada detalle de este proyecto a través de nuestra galería fotográfica
      </p>
    </div>

    <!-- Main Gallery Container -->
    <div class="bg-white rounded-3xl p-8 shadow-lg border border-gray-100 mb-8" data-aos="fade-up" data-aos-delay="100">
      <div class="relative">
        <!-- Main Image Display -->
        <div class="gallery-container relative h-[400px] lg:h-[600px] rounded-2xl overflow-hidden group">
          {images.map((image, index) => (
            <div 
              class={`gallery-slide absolute inset-0 transition-all duration-700 ease-in-out ${index === 0 ? 'opacity-100 scale-100' : 'opacity-0 scale-105'}`}
              data-slide={index}
            >
              <img
                src={image}
                alt={`${title} - Imagen ${index + 1}`}
                class="w-full h-full object-cover"
              />
              <!-- Overlay gradient -->
              <div class="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            </div>
          ))}
          
          <!-- Navigation Controls -->
          <div class="absolute inset-0 flex items-center justify-between p-6 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
            <button 
              class="gallery-prev bg-white/90 backdrop-blur-sm hover:bg-white rounded-2xl p-4 transition-all duration-200 hover:scale-110 shadow-lg"
            >
              <Icon name="ph:caret-left-bold" class="w-6 h-6 text-gray-900" />
            </button>
            <button 
              class="gallery-next bg-white/90 backdrop-blur-sm hover:bg-white rounded-2xl p-4 transition-all duration-200 hover:scale-110 shadow-lg"
            >
              <Icon name="ph:caret-right-bold" class="w-6 h-6 text-gray-900" />
            </button>
          </div>

          <!-- Slide Indicators -->
          <div class="absolute bottom-6 left-1/2 transform -translate-x-1/2 flex gap-2">
            {images.map((_, index) => (
              <button 
                class={`gallery-indicator w-3 h-3 rounded-full transition-all duration-300 ${index === 0 ? 'bg-white scale-125' : 'bg-white/50 hover:bg-white/80'}`}
                data-slide={index}
              ></button>
            ))}
          </div>

          <!-- Image Counter -->
          <div class="absolute top-6 right-6 bg-black/50 backdrop-blur-sm text-white px-4 py-2 rounded-full text-sm font-semibold">
            <span class="gallery-counter">1</span> / {images.length}
          </div>
        </div>
      </div>
    </div>

    <!-- Thumbnail Strip -->
    <div class="grid grid-cols-3 lg:grid-cols-6 gap-4" data-aos="fade-up" data-aos-delay="200">
      {images.map((image, index) => (
        <button 
          class={`gallery-thumb group relative h-24 lg:h-32 rounded-2xl overflow-hidden transition-all duration-300 ${index === 0 ? 'ring-4 ring-brand-primary scale-105' : 'ring-2 ring-gray-200 hover:ring-brand-primary/50 hover:scale-105'}`}
          data-slide={index}
        >
          <img
            src={image}
            alt={`Thumbnail ${index + 1}`}
            class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-300"
          />
          <div class="absolute inset-0 bg-black/20 group-hover:bg-black/10 transition-colors duration-300"></div>
          <div class="absolute inset-0 flex items-center justify-center">
            <div class="w-8 h-8 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
              <Icon name="ph:eye-fill" class="w-4 h-4 text-white" />
            </div>
          </div>
        </button>
      ))}
    </div>

    <!-- Gallery Stats -->
    <div class="grid lg:grid-cols-3 gap-6 mt-16" data-aos="fade-up" data-aos-delay="300">
      <div class="bg-white rounded-2xl p-6 text-center shadow-lg border border-gray-100">
        <div class="w-12 h-12 bg-brand-primary/10 rounded-xl mx-auto mb-4 flex items-center justify-center">
          <Icon name="ph:images-fill" class="w-6 h-6 text-brand-primary" />
        </div>
        <div class="text-2xl font-bold text-gray-900">{images.length}</div>
        <div class="text-gray-600">Imágenes</div>
      </div>
      
      <div class="bg-white rounded-2xl p-6 text-center shadow-lg border border-gray-100">
        <div class="w-12 h-12 bg-brand-secondary/10 rounded-xl mx-auto mb-4 flex items-center justify-center">
          <Icon name="ph:camera-fill" class="w-6 h-6 text-brand-secondary" />
        </div>
        <div class="text-2xl font-bold text-gray-900">HD</div>
        <div class="text-gray-600">Calidad</div>
      </div>
      
      <div class="bg-white rounded-2xl p-6 text-center shadow-lg border border-gray-100">
        <div class="w-12 h-12 bg-brand-primary/15 rounded-xl mx-auto mb-4 flex items-center justify-center">
          <Icon name="ph:eye-fill" class="w-6 h-6 text-brand-primary" />
        </div>
        <div class="text-2xl font-bold text-gray-900">360°</div>
        <div class="text-gray-600">Vista Completa</div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const gallerySlides = document.querySelectorAll('.gallery-slide') as NodeListOf<HTMLElement>;
    const galleryIndicators = document.querySelectorAll('.gallery-indicator') as NodeListOf<HTMLButtonElement>;
    const galleryThumbs = document.querySelectorAll('.gallery-thumb') as NodeListOf<HTMLButtonElement>;
    const prevButton = document.querySelector('.gallery-prev') as HTMLButtonElement | null;
    const nextButton = document.querySelector('.gallery-next') as HTMLButtonElement | null;
    const galleryCounter = document.querySelector('.gallery-counter') as HTMLElement | null;
    
    let currentSlide = 0;
    const totalSlides = gallerySlides.length;
    let autoSlideInterval: ReturnType<typeof setInterval> | null = null;
    
    function updateSlide(index: number): void {
      if (index < 0 || index >= totalSlides) return;
      
      // Update slides
      gallerySlides.forEach((slide, i) => {
        slide.classList.remove('opacity-100', 'scale-100');
        slide.classList.add('opacity-0', 'scale-105');
        
        if (i === index) {
          slide.classList.remove('opacity-0', 'scale-105');
          slide.classList.add('opacity-100', 'scale-100');
        }
      });
      
      // Update indicators
      galleryIndicators.forEach((indicator, i) => {
        if (i === index) {
          indicator.classList.remove('bg-white/50', 'hover:bg-white/80');
          indicator.classList.add('bg-white', 'scale-125');
        } else {
          indicator.classList.remove('bg-white', 'scale-125');
          indicator.classList.add('bg-white/50', 'hover:bg-white/80');
        }
      });
      
      // Update thumbnails
      galleryThumbs.forEach((thumb, i) => {
        if (i === index) {
          thumb.classList.remove('ring-2', 'ring-gray-200', 'hover:ring-brand-primary/50');
          thumb.classList.add('ring-4', 'ring-brand-primary', 'scale-105');
        } else {
          thumb.classList.remove('ring-4', 'ring-brand-primary', 'scale-105');
          thumb.classList.add('ring-2', 'ring-gray-200', 'hover:ring-brand-primary/50');
        }
      });
      
      // Update counter
      if (galleryCounter) {
        galleryCounter.textContent = (index + 1).toString();
      }
      
      currentSlide = index;
    }
    
    function nextSlide(): void {
      updateSlide((currentSlide + 1) % totalSlides);
    }
    
    function prevSlide(): void {
      updateSlide((currentSlide - 1 + totalSlides) % totalSlides);
    }
    
    function startAutoSlide(): void {
      if (autoSlideInterval) clearInterval(autoSlideInterval);
      autoSlideInterval = setInterval(() => {
        nextSlide();
      }, 5000);
    }
    
    function stopAutoSlide(): void {
      if (autoSlideInterval) {
        clearInterval(autoSlideInterval);
        autoSlideInterval = null;
      }
    }
    
    // Event listeners
    if (prevButton) {
      prevButton.addEventListener('click', () => {
        stopAutoSlide();
        prevSlide();
        setTimeout(startAutoSlide, 8000);
      });
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', () => {
        stopAutoSlide();
        nextSlide();
        setTimeout(startAutoSlide, 8000);
      });
    }
    
    // Indicator navigation
    galleryIndicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        stopAutoSlide();
        updateSlide(index);
        setTimeout(startAutoSlide, 8000);
      });
    });
    
    // Thumbnail navigation
    galleryThumbs.forEach((thumb, index) => {
      thumb.addEventListener('click', () => {
        stopAutoSlide();
        updateSlide(index);
        setTimeout(startAutoSlide, 8000);
      });
    });
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        stopAutoSlide();
        prevSlide();
        setTimeout(startAutoSlide, 8000);
      } else if (e.key === 'ArrowRight') {
        stopAutoSlide();
        nextSlide();
        setTimeout(startAutoSlide, 8000);
      }
    });
    
    // Touch/swipe support
    let touchStartX = 0;
    let touchEndX = 0;
    
    const galleryContainer = document.querySelector('.gallery-container') as HTMLElement;
    if (galleryContainer) {
      galleryContainer.addEventListener('touchstart', (e: TouchEvent) => {
        touchStartX = e.changedTouches[0].screenX;
      });
      
      galleryContainer.addEventListener('touchend', (e: TouchEvent) => {
        touchEndX = e.changedTouches[0].screenX;
        handleSwipe();
      });
    }
    
    function handleSwipe(): void {
      const swipeThreshold = 50;
      const diff = touchStartX - touchEndX;
      
      if (Math.abs(diff) > swipeThreshold) {
        stopAutoSlide();
        if (diff > 0) {
          nextSlide();
        } else {
          prevSlide();
        }
        setTimeout(startAutoSlide, 8000);
      }
    }
    
    // Initialize
    updateSlide(0);
    startAutoSlide();
    
    // Pause auto-slide when page is not visible
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        stopAutoSlide();
      } else {
        startAutoSlide();
      }
    });
  });
</script>