---
import { Icon } from 'astro-icon/components';

const servicesVertical = [
  {
    id: 'planificacion-detallada',
    number: '01',
    title: 'Nuestro primer paso esencial',
    navLabel: 'Planificación detallada',
    description:
      'Comenzamos con una planificación meticulosa para entender sus necesidades y asegurar que cada detalle esté considerado desde el inicio.',
    icon: 'ph:clipboard-text',
    image: '/images/layout-355.png',
    href: '/servicios/construccion',
    cta: 'Conoce más'
  },
  {
    id: 'diseno-personalizado',
    number: '02',
    title: 'Diseño personalizado',
    navLabel: 'Diseño personalizado',
    description:
      'Creamos soluciones arquitectónicas adaptadas a cada proyecto, equilibrando funcionalidad, estética y viabilidad técnica.',
    icon: 'ph:pencil-ruler',
    image: '/images/layout-85.png',
    href: '/servicios/remodelacion',
    cta: 'Conoce más'
  },
  {
    id: 'construccion-calidad',
    number: '03',
    title: 'Construcción de calidad',
    navLabel: 'Construcción de calidad',
    description:
      'Gestionamos la ejecución con estándares de excelencia, materiales certificados y supervisión continua para garantizar resultados fiables.',
    icon: 'ph:hammer',
    image: '/images/header-30.png',
    href: '/servicios/mantenimiento',
    cta: 'Conoce más'
  },
  {
    id: 'entrega-puntual',
    number: '04',
    title: 'Entrega puntual',
    navLabel: 'Entrega puntual',
    description:
      'Cumplimos con los plazos acordados mediante planificación precisa y equipos coordinados en todas las etapas del proyecto.',
    icon: 'ph:clock',
    image: '/images/header-50.png',
    href: '/servicios/construccion',
    cta: 'Conoce más'
  }
];
---

<section id="services-vertical-accordion" class="relative bg-neutral-100 py-20 lg:py-28">
  <div class="max-w-6xl mx-auto px-6 sm:px-8 lg:px-12">
    <div class="flex flex-col lg:flex-row gap-8 lg:gap-12">
      <!-- Content Panel -->
      <div class="relative flex-1">
        <div class="relative bg-white border border-neutral-200/80 rounded-[32px] shadow-xl overflow-hidden min-h-[520px] lg:min-h-[580px]">
          {servicesVertical.map((service, index) => (
            <article
              id={`panel-${service.id}`}
              class={`service-panel absolute inset-0 flex flex-col lg:flex-row gap-10 lg:gap-16 p-8 sm:p-10 lg:p-12 transition-all duration-700 ease-out pointer-events-none ${
                index === 0 ? 'active pointer-events-auto' : ''
              }`}
              data-panel-index={index}
              role="tabpanel"
              aria-labelledby={`tab-${service.id}`}
              aria-hidden={index === 0 ? 'false' : 'true'}
              tabindex={index === 0 ? '0' : '-1'}
            >
              <div class="absolute left-6 top-6 hidden lg:flex">
                <div class="vertical-label writing-mode-vertical bg-neutral-900 text-white text-xs tracking-[0.3em] uppercase px-3 py-3 rounded-2xl shadow-md">
                  {service.navLabel}
                </div>
              </div>

              <div class="lg:pl-20 flex-1 flex flex-col justify-center">
                <div class="inline-flex items-center gap-4 mb-6">
                  <span class="text-sm font-semibold tracking-[0.4em] uppercase text-neutral-400">Paso</span>
                  <span class="text-4xl font-urbanist font-bold text-neutral-900">{service.number}</span>
                </div>

                <h2 class="font-urbanist font-semibold text-3xl sm:text-4xl lg:text-[40px] text-neutral-900 leading-tight mb-6">
                  {service.title}
                </h2>

                <p class="font-heebo text-base sm:text-lg text-neutral-700/90 leading-relaxed max-w-xl">
                  {service.description}
                </p>

                <a
                  href={service.href}
                  class="inline-flex items-center gap-3 mt-10 px-6 py-3 rounded-full border-2 border-neutral-900 text-neutral-900 hover:bg-neutral-900 hover:text-white transition-colors duration-300"
                >
                  <Icon name="ph:arrow-up-right" class="w-5 h-5" />
                  {service.cta}
                </a>
              </div>

              <div class="w-full lg:w-[45%]">
                <div class="h-full rounded-[24px] border border-neutral-200/80 bg-neutral-50 overflow-hidden">
                  <img
                    src={service.image}
                    alt={service.title}
                    loading={index === 0 ? 'eager' : 'lazy'}
                    class="w-full h-full object-cover"
                  />
                </div>
              </div>
            </article>
          ))}
        </div>
      </div>

      <!-- Vertical Tabs -->
      <div class="lg:w-[140px] flex lg:flex-col gap-4 lg:gap-6">
        <div class="hidden lg:flex flex-col gap-4 lg:gap-6" role="tablist" aria-orientation="vertical">
          {servicesVertical.map((service, index) => (
            <button
              type="button"
              id={`tab-${service.id}`}
              class={`vertical-tab group relative flex-1 lg:flex-none overflow-hidden rounded-[26px] border transition-all duration-500 ease-out ${
                index === 0 ? 'active' : ''
              }`}
              data-tab-index={index}
              data-animation-delay={index * 200}
              aria-controls={`panel-${service.id}`}
              aria-expanded={index === 0 ? 'true' : 'false'}
              aria-selected={index === 0 ? 'true' : 'false'}
              role="tab"
            >
              <div class="absolute inset-0 bg-neutral-900/5 opacity-0 group-[.active]:opacity-100 transition-opacity"></div>
              <div class="relative h-[220px] flex flex-col items-center justify-between py-6">
                <span class="text-sm font-semibold tracking-[0.3em] text-neutral-500">{service.number}</span>
                <span class="writing-mode-vertical text-neutral-900 font-urbanist text-lg tracking-wide">
                  {service.navLabel}
                </span>
              </div>
            </button>
          ))}
        </div>

        <!-- Mobile Tabs -->
        <div class="flex lg:hidden gap-3 overflow-x-auto pb-2" role="tablist" aria-orientation="horizontal">
          {servicesVertical.map((service, index) => (
            <button
              type="button"
              class={`vertical-tab-mobile flex-shrink-0 min-w-[150px] px-4 py-3 rounded-2xl border transition-all duration-300 ${
                index === 0 ? 'active' : ''
              }`}
              data-tab-index={index}
              data-animation-delay={index * 150}
              aria-controls={`panel-${service.id}`}
              aria-expanded={index === 0 ? 'true' : 'false'}
              aria-selected={index === 0 ? 'true' : 'false'}
              role="tab"
            >
              <div class="flex flex-col gap-1 text-left">
                <span class="text-xs font-semibold tracking-[0.3em] uppercase text-neutral-500">{service.number}</span>
                <span class="font-urbanist text-base font-semibold">{service.navLabel}</span>
              </div>
            </button>
          ))}
        </div>
      </div>
    </div>
  </div>
  
  <!-- Scroll spacer for scroll-based navigation -->
  <div class="scroll-spacer h-[400vh] bg-transparent" aria-hidden="true" data-debug="scroll-spacer"></div>
</section>

<style>
  .writing-mode-vertical {
    writing-mode: vertical-rl;
    text-orientation: mixed;
  }

  .vertical-tab {
    background: rgb(243 244 246);
    border-color: transparent;
  }

  .vertical-tab.active {
    background: rgb(255 255 255);
    border-color: rgba(17, 24, 39, 0.6);
    box-shadow: 0 20px 45px rgba(15, 23, 42, 0.12);
    transform: translateY(-4px);
  }

  .vertical-tab:not(.active):hover {
    background: rgb(229 231 235);
  }

  .vertical-tab-mobile {
    background: rgb(229 231 235);
    border-color: transparent;
    color: rgb(87 87 87);
  }

  .vertical-tab-mobile.active {
    background: rgb(255 255 255);
    border-color: rgba(17, 24, 39, 0.6);
    color: rgb(17 24 39);
    box-shadow: 0 10px 25px rgba(15, 23, 42, 0.12);
  }

  .service-panel {
    opacity: 0;
    transform: translateX(60px);
  }

  .service-panel.active {
    opacity: 1;
    transform: translateX(0);
  }

  /* Header animation states */
  .vertical-tab.animate-in,
  .vertical-tab-mobile.animate-in {
    opacity: 1;
    transform: translateY(0);
  }

  /* Headers should be visible by default */
  .vertical-tab,
  .vertical-tab-mobile {
    opacity: 1;
    transform: translateY(0);
  }

  /* Sticky positioning for scroll effect */
  #services-vertical-accordion > div:first-child {
    position: sticky;
    top: 2rem;
    z-index: 10;
  }

  .scroll-spacer {
    pointer-events: none;
  }

  @media (max-width: 1024px) {
    .writing-mode-vertical {
      writing-mode: horizontal-tb;
    }
    
    #services-vertical-accordion > div {
      top: 1rem;
    }
  }
</style>

<script is:inline>
  class ServicesVerticalAccordion {
    constructor() {
      this.root = document.querySelector('#services-vertical-accordion');
      this.currentStep = 0;
      this.totalSteps = 0;
      this.tabButtons = [];
      this.panels = [];
      this.isTransitioning = false;
      this.headersAnimated = false;
      
      if (!this.root) return;
      
      this.init();
    }
    
    init() {
      this.tabButtons = Array.from(this.root.querySelectorAll('[data-tab-index]'));
      this.panels = Array.from(this.root.querySelectorAll('[data-panel-index]'));
      this.totalSteps = this.tabButtons.length;
      
      if (!this.tabButtons.length || this.tabButtons.length !== this.panels.length) return;
      
      console.log('ServicesVerticalAccordion initialized:', {
        steps: this.totalSteps,
        tabs: this.tabButtons.length,
        panels: this.panels.length
      });
      
      this.setupScrollObserver();
      this.setupTabNavigation();
      this.setActiveStep(0, false);
    }
    
    setupScrollObserver() {
      let ticking = false;
      
      const handleScroll = () => {
        if (!ticking) {
          requestAnimationFrame(() => {
            this.updateStepOnScroll();
            this.animateHeadersOnScroll();
            ticking = false;
          });
          ticking = true;
        }
      };
      
      window.addEventListener('scroll', handleScroll, { passive: true });
      
      // Initial check
      this.updateStepOnScroll();
      this.animateHeadersOnScroll();
      
      // Debug: Log initial state
      console.log('Scroll observer setup complete. Initial step:', this.currentStep);
    }
    
    updateStepOnScroll() {
      if (this.isTransitioning) return;
      
      const rect = this.root.getBoundingClientRect();
      const viewportHeight = window.innerHeight;
      
      // Get the scroll spacer element
      const scrollSpacer = this.root.querySelector('.scroll-spacer');
      if (!scrollSpacer) return;
      
      const spacerRect = scrollSpacer.getBoundingClientRect();
      const spacerTop = spacerRect.top;
      const spacerHeight = spacerRect.height;
      
      // Check if we're in the scrollable area
      if (spacerTop > viewportHeight || spacerTop + spacerHeight < 0) return;
      
      // Calculate how far we've scrolled through the spacer
      const scrolledIntoSpacer = Math.max(0, viewportHeight - spacerTop);
      const scrollProgress = Math.min(1, scrolledIntoSpacer / spacerHeight);
      
      // Determine which step should be active
      const targetStep = Math.min(
        Math.floor(scrollProgress * this.totalSteps),
        this.totalSteps - 1
      );
      
      // Add some smoothing to prevent rapid flickering
      const stepBoundary = 1 / this.totalSteps;
      const progressInStep = (scrollProgress % stepBoundary) / stepBoundary;
      
      let finalStep = targetStep;
      
      // Only switch if we're clearly past the midpoint of a step transition
      if (targetStep !== this.currentStep) {
        if (targetStep > this.currentStep && progressInStep > 0.3) {
          finalStep = targetStep;
        } else if (targetStep < this.currentStep && progressInStep < 0.7) {
          finalStep = targetStep;
        } else {
          finalStep = this.currentStep;
        }
      }
      
      if (finalStep !== this.currentStep) {
        console.log('Scroll progress:', scrollProgress.toFixed(3), 'Step:', finalStep, 'Spacer top:', spacerTop);
        this.setActiveStep(finalStep);
      }
    }
    
    animateHeadersOnScroll() {
      if (this.headersAnimated) return;
      
      const rect = this.root.getBoundingClientRect();
      const viewportHeight = window.innerHeight;
      
      // Check if section is coming into view
      if (rect.top < viewportHeight * 0.9) {
        this.headersAnimated = true;
        this.animateHeaders();
      }
    }
    
    animateHeaders() {
      // Headers are now visible by default, but we can add sequential reveal here if needed
      this.tabButtons.forEach((tab, index) => {
        tab.classList.add('animate-in');
      });
    }
    
    setupTabNavigation() {
      this.tabButtons.forEach((tab, index) => {
        tab.addEventListener('click', () => {
          if (!this.isTransitioning) {
            this.setActiveStep(index);
          }
        });
        
        tab.addEventListener('keydown', (event) => {
          if ((event.key === 'Enter' || event.key === ' ') && !this.isTransitioning) {
            event.preventDefault();
            this.setActiveStep(index);
          }
        });
      });
    }
    
    setActiveStep(stepIndex, animate = true) {
      if (stepIndex < 0 || stepIndex >= this.totalSteps) return;
      
      const prevStep = this.currentStep;
      this.currentStep = stepIndex;
      
      console.log(`Activating step ${stepIndex} from ${prevStep}`);
      
      if (animate && prevStep !== stepIndex) {
        this.animateStepChange(prevStep, stepIndex);
      } else {
        this.updateStepsState();
      }
    }
    
    animateStepChange(fromStep, toStep) {
      this.isTransitioning = true;
      
      // Immediately update state for smooth transitions
      this.updateStepsState();
      
      // End transition after a shorter duration to allow more responsive scrolling
      setTimeout(() => {
        this.isTransitioning = false;
      }, 300); // Shorter duration for more responsive scroll
    }
    
    updateStepsState() {
      // Update tab buttons
      this.tabButtons.forEach((tab, index) => {
        const isActive = index === this.currentStep;
        tab.classList.toggle('active', isActive);
        tab.setAttribute('aria-expanded', String(isActive));
        tab.setAttribute('aria-selected', String(isActive));
      });
      
      // Update panels
      this.panels.forEach((panel, index) => {
        const isActive = index === this.currentStep;
        panel.classList.toggle('active', isActive);
        panel.classList.toggle('pointer-events-none', !isActive);
        panel.classList.toggle('pointer-events-auto', isActive);
        panel.setAttribute('aria-hidden', String(!isActive));
        panel.setAttribute('tabindex', isActive ? '0' : '-1');
        
        if (isActive && typeof panel.focus === 'function') {
          try {
            panel.focus({ preventScroll: true });
          } catch (_) {
            panel.focus();
          }
        }
      });
    }
  }
  
  function initServicesVerticalAccordion() {
    try {
      console.log('Initializing Services Vertical Accordion...');
      new ServicesVerticalAccordion();
    } catch (error) {
      console.error('Error initializing Services Vertical Accordion:', error);
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initServicesVerticalAccordion, { once: true });
  } else {
    initServicesVerticalAccordion();
  }
  
  // Also try after a small delay to ensure all elements are loaded
  setTimeout(initServicesVerticalAccordion, 100);
</script>
