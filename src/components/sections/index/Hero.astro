---
import { Icon } from 'astro-icon/components';
import Button from '../../ui/Button.astro';
import OptimizedImage from '../../media/OptimizedImage.astro';

// Import slider images
import sliderImage1 from '../../../assets/img/index/INDEX_Hero_Slider_1.webp';
import sliderImage2 from '../../../assets/img/index/INDEX_Hero_Slider_2.webp';
import sliderImage3 from '../../../assets/img/index/INDEX_Hero_Slider_3.webp';
import sliderImage4 from '../../../assets/img/index/INDEX_Hero_Slider_4.webp';

// Import logo
import logoCarpioConstructora from '../../../assets/LogoCarpioConstructora.svg';

const sliderImages = [
  { src: sliderImage1, alt: "Proyecto Constructora Carpio 1" },
  { src: sliderImage2, alt: "Proyecto Constructora Carpio 2" },
  { src: sliderImage3, alt: "Proyecto Constructora Carpio 3" },
  { src: sliderImage4, alt: "Proyecto Constructora Carpio 4" }
];
---

<section class="relative w-full min-h-screen flex items-center justify-center overflow-hidden" id="hero-slider">
  <!-- Background Slider Container -->
  <div class="absolute inset-0 w-full h-full bg-gray-900">
    {sliderImages.map((image, index) => (
      <div 
        class={`slider-slide absolute inset-0 w-full h-full transition-all duration-1000 ease-in-out ${index === 0 ? 'active' : ''}`} 
        data-slide={index}
        style={index === 0 ? 'opacity: 1; z-index: 2;' : 'opacity: 0; z-index: 1;'}
      >
        <img
          src={image.src.src}
          alt={image.alt}
          class="absolute inset-0 w-full h-full object-cover slider-bg opacity-70"
          loading={index === 0 ? 'eager' : 'lazy'}
        />
      </div>
    ))}
  </div>
  
  <!-- Enhanced Gradient Overlays -->
  <div class="absolute inset-0 bg-gradient-to-b from-black/30 via-black/40 to-black/60"></div>
  <div class="absolute inset-0 bg-gradient-to-r from-black/30 via-transparent to-black/20"></div>
  
  <!-- Slider Navigation Dots -->
  <div class="absolute bottom-20 left-1/2 transform -translate-x-1/2 flex space-x-3 z-20">
    {sliderImages.map((_, index) => (
      <button 
        class={`slider-dot w-3 h-3 rounded-full transition-all duration-300 ${index === 0 ? 'bg-[#103646] scale-125' : 'bg-white/50 hover:bg-[#103646]/75'}`}
        data-slide-to={index}
        aria-label={`Ir a imagen ${index + 1}`}
      ></button>
    ))}
  </div>
  
  <!-- Centered Content Container following Figma layout -->
  <div class="relative z-10 w-full max-w-6xl mx-auto px-6 lg:px-8 text-center">
    <div class="max-w-4xl mx-auto space-y-8" data-aos="fade-up" data-aos-duration="1200">
      
      <!-- Main Heading - Logo SVG -->
      <div class="flex justify-center items-center mb-6" data-aos="fade-up" data-aos-duration="1200">
        <img 
          src={logoCarpioConstructora.src} 
          alt="Constructora Carpio" 
          class="h-20 sm:h-24 md:h-28 lg:h-32 xl:h-36 w-auto"
          style="filter: brightness(0) invert(1);"
        />
      </div>
      
      <!-- Subtitle - Figma specs: 20px font size -->
      <!-- <p class="font-heebo font-normal text-white/90 max-w-2xl mx-auto leading-relaxed"
         style="font-size: 20px; line-height: 1.6;">
        Construimos tus sueños con calidad y confianza. Proyectos residenciales y comerciales 
        con más de 15 años de experiencia en el sector.
      </p> -->
      
      <!-- Action Buttons - Using new standardized Button component -->
      <div class="flex flex-col sm:flex-row gap-4 justify-center items-center pt-4" 
           data-aos="fade-up" 
           data-aos-delay="300">
        <Button 
          href="/proyectos" 
          variant="primary"
          size="lg"
          icon="ph:arrow-right"
          iconPosition="left"
          class="min-w-[180px] bg-[#103646] hover:bg-[#103646]/90 text-white border-[#103646]"
        >
          Ver Proyectos
        </Button>
        
        <Button 
          href="/servicios" 
          variant="outline"
          size="lg"
          icon="ph:list-bullets"
          iconPosition="left"
          class="min-w-[180px] border-white/40 text-white hover:bg-white hover:text-[#103646] backdrop-blur-sm"
        >
          Ver Servicios
        </Button>
      </div>
      
    </div>
  </div>
  
  <!-- Scroll Indicator -->
  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 text-white animate-bounce" 
       data-aos="fade-in" 
       data-aos-delay="1200">
    <Icon name="ph:arrow-down" class="w-6 h-6" />
  </div>
</section>

<style>
  /* Advanced Slider Effects */
  .slider-slide {
    z-index: 1;
    transform-origin: center center;
    transition: opacity 1.5s cubic-bezier(0.4, 0, 0.2, 1), 
                transform 1.5s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .slider-slide.active {
    opacity: 1 !important;
    transform: scale(1) !important;
    z-index: 2 !important;
  }
  
  .slider-slide.prev {
    transform: scale(1.1) translateX(-50px) !important;
    opacity: 0 !important;
    z-index: 1;
  }
  
  .slider-slide.next {
    transform: scale(1.1) translateX(50px) !important;
    opacity: 0 !important;
    z-index: 1;
  }
  
  .slider-bg {
    transition: transform 8s ease-out;
    display: block !important;
    width: 100% !important;
    height: 100% !important;
  }
  
  /* Ensure first slide is visible immediately */
  .slider-slide[data-slide="0"] {
    opacity: 1;
    z-index: 2;
  }
  
  /* Ken Burns Effect - Different for each slide */
  @keyframes kenBurns {
    0% { 
      transform: scale(1) rotate(0deg); 
      transform-origin: top left;
    }
    100% { 
      transform: scale(1.08) rotate(0.5deg); 
      transform-origin: bottom right;
    }
  }
  
  @keyframes kenBurnsReverse {
    0% { 
      transform: scale(1.08) rotate(-0.5deg); 
      transform-origin: bottom right;
    }
    100% { 
      transform: scale(1) rotate(0deg); 
      transform-origin: top left;
    }
  }
  
  @keyframes kenBurnsCenter {
    0% { 
      transform: scale(1) rotate(0deg); 
      transform-origin: center center;
    }
    100% { 
      transform: scale(1.1) rotate(0.3deg); 
      transform-origin: center center;
    }
  }
  
  @keyframes kenBurnsZoom {
    0% { 
      transform: scale(1.05) rotate(0.2deg); 
      transform-origin: top right;
    }
    100% { 
      transform: scale(1) rotate(-0.2deg); 
      transform-origin: bottom left;
    }
  }
  
  /* Apply different animations to each slide */
  .slider-slide[data-slide="0"] .slider-bg { animation: kenBurns 12s ease-in-out infinite alternate; }
  .slider-slide[data-slide="1"] .slider-bg { animation: kenBurnsReverse 10s ease-in-out infinite alternate; }
  .slider-slide[data-slide="2"] .slider-bg { animation: kenBurnsCenter 14s ease-in-out infinite alternate; }
  .slider-slide[data-slide="3"] .slider-bg { animation: kenBurnsZoom 11s ease-in-out infinite alternate; }
  
  /* Slider Dots Enhanced */
  .slider-dot {
    cursor: pointer;
    backdrop-filter: blur(4px);
    border: 2px solid rgba(255, 255, 255, 0.3);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .slider-dot.active {
    background: white !important;
    transform: scale(1.3) !important;
    border-color: rgba(255, 255, 255, 0.8);
    box-shadow: 0 0 20px rgba(255, 255, 255, 0.6);
  }
  
  .slider-dot:hover {
    transform: scale(1.1);
    border-color: rgba(255, 255, 255, 0.6);
  }
  
  /* Enhanced bounce effect */
  @media (prefers-reduced-motion: no-preference) {
    .animate-bounce {
      animation: enhancedBounce 2s infinite;
    }
    
    @keyframes enhancedBounce {
      0%, 20%, 53%, 80%, 100% {
        animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);
        transform: translate3d(-50%, 0, 0);
      }
      40%, 43% {
        animation-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);
        transform: translate3d(-50%, -30px, 0);
      }
      70% {
        animation-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);
        transform: translate3d(-50%, -15px, 0);
      }
      90% {
        transform: translate3d(-50%, -4px, 0);
      }
    }
  }
  
  /* Enhanced text effects */
  h1 {
    text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.8), 
                 0 0 30px rgba(0, 0, 0, 0.6),
                 0 0 20px rgba(255, 255, 255, 0.1);
    animation: textGlow 3s ease-in-out infinite alternate;
  }
  
  /* Better text readability */
  p {
    text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.7);
  }
  
  @keyframes textGlow {
    0% { text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5), 0 0 20px rgba(255, 255, 255, 0.1); }
    100% { text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7), 0 0 30px rgba(255, 255, 255, 0.2); }
  }
  
  /* Improved responsive typography */
  @media (max-width: 640px) {
    h1 {
      font-size: clamp(36px, 10vw, 48px) !important;
    }
    
    .slider-dot {
      width: 12px;
      height: 12px;
    }
  }
  
  /* GPU acceleration */
  .slider-slide,
  .slider-bg {
    transform: translateZ(0);
    backface-visibility: hidden;
    will-change: transform, opacity;
  }
</style>

<script>
  // Advanced Hero Slider with Enhanced Effects
  class HeroSlider {
    private currentSlide = 0;
    private slides: HTMLElement[] = [];
    private dots: HTMLElement[] = [];
    private totalSlides = 0;
    private isAutoPlaying = true;
    private autoPlayInterval: number | null = null;
    private transitionDuration = 6000; // 6 seconds
    
    constructor() {
      this.init();
    }
    
    private init(): void {
      this.slides = Array.from(document.querySelectorAll('.slider-slide'));
      this.dots = Array.from(document.querySelectorAll('.slider-dot'));
      this.totalSlides = this.slides.length;
      
      console.log('Hero Slider initialized:', {
        slides: this.totalSlides,
        dots: this.dots.length
      });
      
      // Debug: show image sources
      this.slides.forEach((slide, index) => {
        const img = slide.querySelector('img');
        if (img) {
          console.log(`Slide ${index} image:`, img.src);
        }
      });
      
      if (this.totalSlides === 0) {
        console.error('No slider slides found!');
        return;
      }
      
      // Set initial state
      this.updateSlider(0, false);
      
      // Add event listeners
      this.dots.forEach((dot, index) => {
        dot.addEventListener('click', () => this.goToSlide(index));
      });
      
      // Start autoplay (no pause on hover)
      this.startAutoPlay();
      
      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') this.prevSlide();
        if (e.key === 'ArrowRight') this.nextSlide();
      });
      
      // Swipe support for mobile
      this.initSwipeSupport();
    }
    
    private updateSlider(newIndex: number, useTransition = true): void {
      const prevIndex = this.currentSlide;
      this.currentSlide = newIndex;
      
      console.log('Updating slider:', { from: prevIndex, to: newIndex });
      
      // Update slides - simplified approach
      this.slides.forEach((slide, index) => {
        slide.classList.remove('active', 'prev', 'next');
        
        if (index === newIndex) {
          slide.classList.add('active');
          slide.style.opacity = '1';
          slide.style.zIndex = '10';
          slide.style.transform = 'scale(1)';
        } else {
          slide.style.opacity = '0';
          slide.style.zIndex = '1';
          slide.style.transform = 'scale(1.05)';
        }
      });
      
      // Update dots
      this.dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === newIndex);
      });
      
      console.log(`Active slide: ${newIndex}, visible slide opacity:`, this.slides[newIndex]?.style.opacity);
    }
    
    private applyTransitionEffect(prevIndex: number, newIndex: number): void {
      const prevSlide = this.slides[prevIndex];
      const newSlide = this.slides[newIndex];
      
      if (!prevSlide || !newSlide) return;
      
      // Different effects based on slide direction
      const effects = [
        'fadeZoom',
        'slideRotate', 
        'scaleBlur',
        'flipFade'
      ];
      
      const effectIndex = Math.abs(newIndex - prevIndex) % effects.length;
      const effect = effects[effectIndex];
      
      switch (effect) {
        case 'fadeZoom':
          this.fadeZoomTransition(prevSlide, newSlide);
          break;
        case 'slideRotate':
          this.slideRotateTransition(prevSlide, newSlide, newIndex > prevIndex);
          break;
        case 'scaleBlur':
          this.scaleBlurTransition(prevSlide, newSlide);
          break;
        case 'flipFade':
          this.flipFadeTransition(prevSlide, newSlide);
          break;
      }
    }
    
    private fadeZoomTransition(prevSlide: HTMLElement, newSlide: HTMLElement): void {
      prevSlide.style.transition = 'opacity 1s ease-out, transform 1s ease-out';
      newSlide.style.transition = 'opacity 1s ease-in, transform 1s ease-in';
      
      prevSlide.style.transform = 'scale(0.95)';
      newSlide.style.transform = 'scale(1)';
    }
    
    private slideRotateTransition(prevSlide: HTMLElement, newSlide: HTMLElement, isNext: boolean): void {
      const direction = isNext ? 1 : -1;
      
      prevSlide.style.transition = 'transform 1.2s cubic-bezier(0.645, 0.045, 0.355, 1)';
      newSlide.style.transition = 'transform 1.2s cubic-bezier(0.645, 0.045, 0.355, 1)';
      
      prevSlide.style.transform = `translateX(${-50 * direction}px) rotate(${2 * direction}deg) scale(0.9)`;
      newSlide.style.transform = 'translateX(0) rotate(0deg) scale(1)';
    }
    
    private scaleBlurTransition(prevSlide: HTMLElement, newSlide: HTMLElement): void {
      prevSlide.style.transition = 'transform 1s ease-out, filter 0.5s ease-out';
      newSlide.style.transition = 'transform 1s ease-in, filter 0.5s ease-in';
      
      prevSlide.style.filter = 'blur(2px)';
      prevSlide.style.transform = 'scale(1.1)';
      
      setTimeout(() => {
        newSlide.style.filter = 'blur(0px)';
        newSlide.style.transform = 'scale(1)';
      }, 300);
    }
    
    private flipFadeTransition(prevSlide: HTMLElement, newSlide: HTMLElement): void {
      prevSlide.style.transition = 'transform 0.8s ease-in-out, opacity 0.4s ease-out';
      newSlide.style.transition = 'transform 0.8s ease-in-out, opacity 0.4s ease-in 0.4s';
      
      prevSlide.style.transform = 'rotateY(90deg) scale(0.8)';
      
      setTimeout(() => {
        newSlide.style.transform = 'rotateY(0deg) scale(1)';
      }, 400);
    }
    
    private goToSlide(index: number): void {
      if (index !== this.currentSlide && index >= 0 && index < this.totalSlides) {
        this.updateSlider(index);
        this.resetAutoPlay();
      }
    }
    
    private nextSlide(): void {
      const nextIndex = (this.currentSlide + 1) % this.totalSlides;
      this.goToSlide(nextIndex);
    }
    
    private prevSlide(): void {
      const prevIndex = (this.currentSlide - 1 + this.totalSlides) % this.totalSlides;
      this.goToSlide(prevIndex);
    }
    
    private startAutoPlay(): void {
      if (!this.isAutoPlaying) return;
      
      this.autoPlayInterval = window.setInterval(() => {
        this.nextSlide();
      }, this.transitionDuration);
    }
    
    private pauseAutoPlay(): void {
      if (this.autoPlayInterval) {
        clearInterval(this.autoPlayInterval);
        this.autoPlayInterval = null;
      }
    }
    
    private resetAutoPlay(): void {
      this.pauseAutoPlay();
      this.startAutoPlay();
    }
    
    private initSwipeSupport(): void {
      let startX = 0;
      let startY = 0;
      let endX = 0;
      let endY = 0;
      
      const heroSection = document.getElementById('hero-slider');
      if (!heroSection) return;
      
      heroSection.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
      });
      
      heroSection.addEventListener('touchend', (e) => {
        endX = e.changedTouches[0].clientX;
        endY = e.changedTouches[0].clientY;
        
        const deltaX = endX - startX;
        const deltaY = endY - startY;
        
        // Only trigger if horizontal swipe is dominant
        if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {
          if (deltaX > 0) {
            this.prevSlide();
          } else {
            this.nextSlide();
          }
        }
      });
    }
  }
  
  // Enhanced Intersection Observer for animations
  const observerOptions: IntersectionObserverInit = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };
  
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        (entry.target as HTMLElement).classList.add('animate-in');
      }
    });
  }, observerOptions);
  
  // Initialize slider
  function initHeroSlider() {
    try {
      console.log('Initializing Hero Slider...');
      new HeroSlider();
      
      // Observe elements for animations
      document.querySelectorAll('[data-aos]').forEach(el => {
        observer.observe(el);
      });
    } catch (error) {
      console.error('Error initializing Hero Slider:', error);
    }
  }
  
  // Multiple initialization attempts to ensure it works
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initHeroSlider);
  } else {
    initHeroSlider();
  }
  
  // Also try after a small delay
  setTimeout(initHeroSlider, 100);
  
  // Reduced motion support
  if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
    document.documentElement.style.setProperty('--animation-duration', '0s');
  }
</script>
