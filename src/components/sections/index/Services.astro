---
import { Icon } from 'astro-icon/components';
import SectionLayout from '../../ui/SectionLayout.astro';

// Data: services list with images and details
const services = [
  {
    id: 'proyectos-industriales',
    number: '01',
    title: 'Proyectos y Construcciones Industriales',
    icon: 'ph:factory',
    description:
      'Diseñamos y ejecutamos proyectos industriales con enfoque en eficiencia, seguridad y estándares de calidad.',
    href: '/servicios/construccion',
    cta: 'Ver más',
    images: ['/images/header-30.png', '/images/header-50.png', '/images/layout-355.png']
  },
  {
    id: 'centros-logisticos',
    number: '02',
    title: 'Centros de Distribución Logística',
    icon: 'ph:warehouse',
    description:
      'Soluciones a la medida para cadenas logísticas: capacidad, flujo y seguridad operativa.',
    href: '/servicios/remodelacion',
    cta: 'Ver más',
    images: ['/images/layout-85.png', '/images/header-30.png', '/images/header-50.png']
  },
  {
    id: 'planimetria',
    number: '03',
    title: 'Planimetría',
    icon: 'ph:ruler',
    description:
      'Levantamientos y planos detallados para una ejecución sin sorpresas y con total precisión.',
    href: '/servicios/mantenimiento',
    cta: 'Ver más',
    images: ['/images/layout-355.png', '/images/layout-85.png', '/images/header-30.png']
  },
  {
    id: 'oficinas-industriales',
    number: '04',
    title: 'Oficinas para Complejos Industriales',
    icon: 'ph:buildings',
    description:
      'Espacios corporativos funcionales y modernos integrados a complejos industriales.',
    href: '/servicios/construccion',
    cta: 'Ver más',
    images: ['/images/header-50.png', '/images/layout-355.png', '/images/layout-85.png']
  }
];
---

<SectionLayout background="white" paddingY="lg" paddingX="lg" maxWidth="xl" className="relative overflow-hidden">
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-16">
      <!-- Left: Scroll-activated accordion -->
      <div id="services-accordion" class="space-y-1" data-aos="fade-up">
        {services.map((s, idx) => (
          <article 
            id={`service-${s.id}`} 
            class="group border-b-2 border-neutral-darkest"
            data-service-index={idx}
          >
            <!-- Header Row -->
            <button type="button" class="w-full py-5 lg:py-6 flex items-center justify-between gap-4 lg:gap-8 focus:outline-none"
              aria-controls={`panel-${s.id}`} aria-expanded={idx === 0 ? 'true' : 'false'}
            >
              <div class="flex items-center gap-4 lg:gap-6 text-left">
                <Icon name={s.icon} class="w-6 h-6 lg:w-7 lg:h-7 text-neutral-darkest" />
                <span class="font-urbanist font-medium text-[20px] lg:text-[32px] text-neutral-darkest">
                  <span class="mr-3 text-neutral-darkest">{s.number}</span>{s.title}
                </span>
              </div>
              <Icon name="ph:caret-down" class="w-5 h-5 lg:w-6 lg:h-6 text-neutral-darkest transition-transform duration-300 group-[.active]:rotate-180" />
            </button>
            <!-- Panel -->
            <div id={`panel-${s.id}`} class={`grid transition-[grid-template-rows] duration-500 ease-out ${idx === 0 ? 'grid-rows-[1fr]' : 'grid-rows-[0fr]'} overflow-hidden`}
                 aria-hidden={idx === 0 ? 'false' : 'true'}>
              <div class="min-h-0 overflow-hidden pb-5 lg:pb-6">
                <p class="font-heebo text-[16px] lg:text-[18px] text-neutral-darkest/80 leading-[1.6] max-w-prose">
                  {s.description}
                </p>
                <a href={s.href} class="inline-flex items-center justify-center mt-4 px-5 py-2 rounded-full border-2 border-neutral-darkest text-neutral-darkest hover:bg-neutral-darkest hover:text-white transition-colors">
                  {s.cta}
                  <Icon name="ph:arrow-right" class="w-5 h-5 ml-2" />
                </a>
              </div>
            </div>
          </article>
        ))}
      </div>

      <!-- Right: Sticky images that change with active item -->
      <div class="hidden lg:block sticky top-24 self-start" aria-live="polite">
        {services.map((s, idx) => (
          <div class={`service-images ${idx === 0 ? '' : 'hidden'} transition-opacity duration-500`} data-images-index={idx}>
            <div class="grid grid-cols-2 grid-rows-3 gap-3 h-[560px]">
              <!-- image 1: span 2 cols on row 1 -->
              <div class="col-span-2 row-span-1 rounded-xl overflow-hidden border border-neutral-darkest/20">
                <img src={s.images[0]} alt={s.title} class="w-full h-full object-cover" />
              </div>
              <!-- image 2: row 2, col 1 -->
              <div class="col-span-1 row-span-1 rounded-xl overflow-hidden border border-neutral-darkest/20">
                <img src={s.images[1]} alt={s.title} class="w-full h-full object-cover" />
              </div>
              <!-- image 3: row 2-3, col 2 -->
              <div class="col-span-1 row-span-2 rounded-xl overflow-hidden border border-neutral-darkest/20">
                <img src={s.images[2]} alt={s.title} class="w-full h-full object-cover" />
              </div>
              <!-- spacer to align grid height -->
              <div class="col-span-1 row-span-1"></div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>

  <script is:inline>
    // Scroll-activated accordion logic with IntersectionObserver
    function initServicesAccordion() {
      const items = document.querySelectorAll('#services-accordion article');
      const imagesGroups = document.querySelectorAll('.service-images');

      if (!items.length) return;

      function setActive(index) {
        items.forEach((it, i) => {
          it.classList.toggle('active', i === index);
          const btn = it.querySelector('button');
          const panel = it.querySelector('[id^="panel-"]');
          if (btn) btn.setAttribute('aria-expanded', String(i === index));
          if (panel) panel.setAttribute('aria-hidden', String(i !== index));
          if (panel) panel.className = `grid transition-[grid-template-rows] duration-500 ease-out ${i === index ? 'grid-rows-[1fr]' : 'grid-rows-[0fr]'} overflow-hidden`;
        });
        imagesGroups.forEach((g, i) => {
          if (i === index) {
            g.classList.remove('hidden');
            g.style.opacity = '1';
          } else {
            g.classList.add('hidden');
            g.style.opacity = '0';
          }
        });
      }

      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const target = entry.target;
            const idxAttr = target.getAttribute('data-service-index');
            const idx = idxAttr ? Number(idxAttr) : 0;
            setActive(isNaN(idx) ? 0 : idx);
          }
        });
      }, { root: null, threshold: 0.4, rootMargin: '0px 0px -20% 0px' });

      items.forEach((it) => observer.observe(it));

      // Click and keyboard toggle behavior
      items.forEach((it, i) => {
        const btn = it.querySelector('button');
        if (btn) {
          btn.addEventListener('click', () => setActive(i));
          btn.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
              e.preventDefault();
              setActive(i);
            }
          });
        }
      });
    }

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initServicesAccordion, { once: true });
    } else {
      initServicesAccordion();
    }
  </script>
</SectionLayout>

<style></style>
